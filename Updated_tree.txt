# MakNeebGame Project Structure and Functionality

Java-OOP-CS30-KMITL/
└── MakNeebGame/
    ├── assets/                      # Game resources
    │   ├── icon/                    # GUI icons
    │   │   ├── closeButton.png      # Window close button
    │   │   ├── ICONKMITL.png        # KMITL logo icon
    │   │   ├── minimizeButton.png   # Window minimize button
    │   │   └── resizeButton.png     # Window resize button
    │   ├── Rok/                     # Game pieces
    │   │   └── Rok.png              # Main game piece image
    │   ├── sound/                   # Audio files
    │   │   ├── capture.mp3          # Sound when capturing piece
    │   │   ├── move.mp3             # Sound when moving piece
    │   │   └── start.mp3            # Game start sound
    │   ├── background.jpg           # Menu background
    │   ├── background1.jpg          # Alternative background
    │   └── background2.jpg          # Alternative background
    │
    └── src/                         # Source code
        ├── main/                    # Application entry point
        │   ├── Main.java            # Main entry point (launches GameLauncher)
        │   │   └── main()           # Creates GameLauncher and calls launch()
        │   └── GameLauncher.java    # Game initialization
        │       ├── launch()         # Creates StartScreen
        │       └── startGame()      # Creates GameFrame and initializes game
        │
        ├── ui/                      # User interface components 
        │   ├── StartScreen.java     # Game's start menu screen
        │   │   ├── createStyledButton() # Creates menu buttons
        │   │   ├── createSoundButton() # Creates sound control buttons
        │   │   ├── showRules()      # Displays game rules dialog
        │   │   └── startBackgroundAnimation() # Handles background changes
        │   │
        │   ├── BackgroundPanel.java # Animated background for start screen
        │   │   ├── loadNextBackground() # Loads next background image
        │   │   ├── startTransition() # Animates background transitions
        │   │   └── createContent()  # Creates UI elements on panel
        │   │
        │   ├── GameFrame.java       # Main game window
        │   │   ├── startTimerUpdates() # Updates timer display
        │   │   └── restartGame()    # Resets the game state
        │   │
        │   ├── GamePanel.java       # Game board display area
        │   │   ├── paintComponent() # Renders game area
        │   │   └── handleMouseEvents() # Processes board interactions
        │   │
        │   ├── InfoPanel.java       # Player information panel
        │   │   ├── updateTimer()    # Updates time display
        │   │   └── updatePieceCount() # Updates captured/remaining pieces
        │   │
        │   ├── TitleBar.java        # Custom window title bar
        │   │   ├── createCloseButton() # Creates window close button
        │   │   └── setupDragging() # Sets up window dragging functionality
        │   │
        │   ├── RulesDialog.java     # Game rules popup dialog
        │   │   └── createRulesContent() # Creates rules text and diagrams
        │   │
        │   ├── MoveHistoryPanel.java # Game move history
        │   │   └── addGameMove()    # Records moves in notation
        │   │
        │   ├── ClockIcon.java       # Timer display icon
        │   │   └── paintComponent() # Draws animated clock
        │   │
        │   ├── StyledButton.java    # Custom button with styling
        │   │   └── paintComponent() # Renders button with custom look
        │   │
        │   ├── SoundToggleButton.java # Sound on/off button
        │   │   └── actionPerformed() # Toggles sound state
        │   │
        │   ├── VolumeButton.java    # Volume control button
        │   │   └── actionPerformed() # Adjusts volume
        │   │
        │   ├── IconButton.java      # Button with icon
        │   │   └── paintComponent() # Renders icon button
        │   │
        │   ├── VolumeIndicatorPanel.java # Volume level display
        │   │   └── paintComponent() # Shows volume bars
        │   │
        │   └── GameRuleDiagramPanel.java # Visual rule examples
        │       └── paintComponent() # Draws rule diagrams
        │
        ├── board/                   # Board-related components
        │   ├── Board.java           # Main board component - orchestrates other components
        │   │   ├── paintComponent() # Renders the board and pieces
        │   │   ├── showCaptureEffect() # Shows animation when piece is captured
        │   │   └── resetGame()      # Resets board to initial state
        │   ├── BoardRenderer.java   # Handles board visual rendering
        │   │   ├── render()         # Renders the entire board
        │   │   ├── drawBoard()      # Draws board tiles
        │   │   ├── drawLegalMoves() # Highlights valid move positions
        │   │   └── drawTurnIndicator() # Shows current player's turn
        │   ├── BoardLogic.java      # Board game logic
        │   │   ├── initializePieces() # Sets up initial pieces
        │   │   ├── movePiece()      # Handles piece movement
        │   │   ├── checkCaptures()  # Checks for piece captures
        │   │   └── checkAtari()     # Checks for surrounded pieces
        │   ├── BoardInputHandler.java # Handles mouse input on board
        │   │   └── handleMousePress() # Processes mouse clicks
        │   └── BoardAnimator.java   # Manages board animations
        │       ├── startAnimationTimer() # Starts animation loop
        │       └── showCaptureEffect() # Shows piece capture animation
        │
        ├── pieces/                  # Game pieces
        │   ├── Piece.java           # Abstract piece base class
        │   └── RokPiece.java        # Rok piece implementation
        │       ├── getImage()       # Returns piece image
        │       └── getColor()       # Returns piece color (BLACK/WHITE)
        │
        ├── game/                    # Game management
        │   ├── GameController.java  # Controls game flow
        │   │   ├── gameOver()       # Handles end game state
        │   │   ├── switchSides()    # Switches board perspective
        │   │   ├── switchTurn()     # Changes active player
        │   │   ├── updatePieceCount() # Updates piece counts in InfoPanel
        │   │   ├── setInfoPanel()   # Links to InfoPanel for updates
        │   │   └── playSound()      # Controls game sound effects
        │   │
        │   └── TimerManager.java    # Manages player time
        │       ├── createTimerUI()  # Creates timer display components
        │       ├── updateTimerDisplay() # Updates timer UI
        │       ├── switchTurn()     # Changes active player's timer
        │       ├── getWhiteTime()   # Returns white player's time
        │       ├── getBlackTime()   # Returns black player's time
        │       ├── resetTimer()     # Resets both players' timers
        │       └── endGameDueToTime() # Handles timeout scenarios
        │
        └── utils/                   # Utilities
            ├── SoundManager.java    # Audio playback
            │   ├── playSound()      # Plays sound effect
            │   └── loopSound()      # Plays background music
            ├── ResourceManager.java # Loads game resources
            │   └── loadImage()      # Loads image files
            ├── WindowResizer.java   # Handles window resizing
        

## Game Flow

1. Application Start
   └── Main.java
       └── GameLauncher.launch()
           └── Creates StartScreen
               ├── Shows animated background (cycles through background1.jpg, background2.jpg, background.jpg)
               └── Displays buttons: PLAY GAME, GAME RULES, EXIT GAME

2. Game Start Flow
   └── PLAY GAME button clicked
       └── GameLauncher.startGame()
           └── Creates GameFrame
               ├── Creates Board
               ├── Creates GameController (links to Board)
               ├── Creates TimerManager
               ├── Creates InfoPanel
               └── startTimerUpdates() begins clock

3. Board Initialization
   └── Board constructor
       ├── Creates BoardRenderer, BoardLogic, BoardInputHandler, BoardAnimator
       ├── Sets up mouse listeners
       └── paintComponent() calculates board dimensions and positions

4. Gameplay Flow
   ├── Player clicks on piece
   │   └── BoardInputHandler.handleMousePress()
   │       └── Board.selectPiece() → BoardLogic.selectPiece()
   │           ├── Updates selectedRow/selectedCol
   │           ├── Plays "select" sound
   │           └── updateLegalMoves() shows valid moves
   │
   ├── Player clicks destination tile
   │   └── BoardInputHandler.handleMousePress()
   │       └── Board.movePiece() → BoardLogic.movePiece()
   │           ├── Checks move validity
   │           ├── Updates piece position
   │           ├── Checks for captures (BoardLogic.checkCaptures())
   │           ├── Checks for surrounded pieces (BoardLogic.checkAtari())
   │           ├── Plays appropriate sound effect
   │           └── Switches turns (GameController.switchTurn())
   │
   └── Turn switch
       └── TimerManager.switchTurn()
           ├── Changes active timer
           └── Updates InfoPanel display

5. Game End Conditions
   └── BoardLogic.isGameOver() checks:
       ├── Player has fewer than 2 pieces remaining
       └── Time runs out (TimerManager.endGameDueToTime())
           └── GameController.gameOver() shows winner dialog

6. UI Controls
   ├── InfoPanel buttons
   │   ├── Restart: GameFrame.restartGame() creates new game
   │   └── Switch sides: GameController.switchSides() flips perspective
   │
   └── Window controls
       ├── Close button: Closes window
       ├── Minimize button: Minimizes window
       └── Resize button: Enables window resizing

## Component Interactions

1. View Components (ui/)
   └── Render game visuals and handle user input

2. Model Components (board/, pieces/)
   └── Maintain game state and implement game logic

3. Controller Components (game/)
   └── Coordinate between view and model, manage game flow

4. Utility Components (utils/)
   └── Provide common functionality used across the application
